---
description: How to add or edit Cursor rules in your project
globs:
alwaysApply: false
---

# Cursor Rules Management Guide

## Rule Structure Format

Every cursor rule must follow this exact metadata and content structure:

````markdown
---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/*
alwaysApply: false
---

# Rule Title

Main content explaining the rule with markdown formatting.

1. Step-by-step instructions
2. Code examples
3. Guidelines

Example:
```apex
// Good
public static String goodExample(String inputValue) {
    // Correct implementation with proper error handling
    if (String.isBlank(inputValue)) {
        throw new IllegalArgumentException('Input value cannot be blank');
    }
    return inputValue.trim().toLowerCase();
}
// Bad example
public static String badExample(String inputValue) {
    // Incorrect implementation without null checks
    return inputValue.toLowerCase();
}
```
````

## File Organization

### Required Location

All cursor rule files **must** be placed in:

```
PROJECT_ROOT/.cursor/rules/
```

### Directory Structure

```
PROJECT_ROOT/
├── .cursor/
│   └── rules/
│       ├── your-rule-name.mdc
│       ├── another-rule.mdc
│       └── cursor-rules.mdc
└── ...
```

### Naming Conventions

- Use **kebab-case** for all filenames
- Always use **.mdc** extension
- Make names **descriptive** of the rule's purpose
- Examples: `typescript-style.mdc`, `tailwind-styling.mdc`, `mdx-documentation.mdc`

## Content Guidelines

### Writing Effective Rules

1. **Be specific and actionable** - Provide clear instructions
2. **Include code examples** - Show both good and bad practices
3. **Reference existing files** - Use `@filename.ext` format
4. **Keep it focused** - One rule per concern/pattern
5. **Add context** - Explain why the rule exists

### Code Examples Format

```apex
// ✅ Good: Proper SOQL query with limits and error handling
public static List<Account> getAccountsByIndustry(String industry) {
    if (String.isBlank(industry)) {
        return new List<Account>();
    }

    return [
        SELECT Id, Name, Industry, Phone
        FROM Account
        WHERE Industry = :industry
        LIMIT 200
    ];
}

// ❌ Bad: No limits, no null checks, inefficient query
public static List<Account> getAccountsByIndustry(String industry) {
    return [SELECT Id, Name FROM Account WHERE Industry = :industry];
}
```

```javascript
// ✅ Good: LWC with proper error handling and reactivity
import { LightningElement, api, track } from 'lwc';
import getAccountData from '@salesforce/apex/AccountController.getAccountData';

export default class AccountDisplay extends LightningElement {
    @api recordId;
    @track accountData;
    @track error;

    async connectedCallback() {
        try {
            this.accountData = await getAccountData({ accountId: this.recordId });
        } catch (error) {
            this.error = error;
            console.error('Error fetching account data:', error);
        }
    }
}

// ❌ Bad: No error handling, missing imports
export default class AccountDisplay extends LightningElement {
    @api recordId;
    accountData;

    connectedCallback() {
        getAccountData({ accountId: this.recordId })
            .then(result => {
                this.accountData = result;
            });
    }
}
```

### File References

When referencing project files in rules, use this pattern to mention other files:

```markdown
[AccountController.cls](mdc:force-app/main/default/classes/AccountController.cls)
[accountDisplay.js](mdc:force-app/main/default/lwc/accountDisplay/accountDisplay.js)
```

## Forbidden Locations

**Never** place rule files in:
- Project root directory
- Any subdirectory outside `.cursor/rules/`
- Salesforce source directories (force-app/, src/)
- Component directories
- Documentation folders

## Rule Categories

Organize rules by purpose:
- **Apex Style**: `apex-coding-standards.mdc`, `apex-error-handling.mdc`
- **LWC Patterns**: `lwc-component-patterns.mdc`, `lwc-data-binding.mdc`
- **Architecture**: `salesforce-architecture.mdc`, `org-structure.mdc`
- **Documentation**: `apex-documentation.mdc`, `lwc-documentation.mdc`
- **Testing**: `apex-testing-patterns.mdc`, `lwc-testing-patterns.mdc`
- **Meta**: `cursor-rules.mdc`, `self-improve.mdc`

## Best Practices

### Rule Creation Checklist
- [ ] File placed in `.cursor/rules/` directory
- [ ] Filename uses kebab-case with `.mdc` extension
- [ ] Includes proper metadata section
- [ ] Contains clear title and sections
- [ ] Provides both good and bad examples
- [ ] References relevant Salesforce files
- [ ] Follows Salesforce coding conventions
- [ ] Includes proper error handling examples

### Maintenance
- **Review regularly** - Keep rules up to date with codebase changes
- **Update examples** - Ensure code samples reflect current patterns
- **Cross-reference** - Link related rules together
- **Document changes** - Update rules when patterns evolve
- **Test examples** - Verify Apex and LWC code examples compile and work