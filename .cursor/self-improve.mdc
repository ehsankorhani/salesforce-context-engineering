---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

## Rule Improvement Triggers

- New code patterns not covered by existing rules
- Repeated similar implementations across files
- Common error patterns that could be prevented
- New libraries or tools being used consistently
- Emerging best practices in the codebase

# Analysis Process:
- Compare new code with existing rules
- Identify patterns that should be standardized
- Look for references to external documentation
- Check for consistent error handling patterns
- Monitor test patterns and coverage

# Rule Updates:

- **Add New Rules When:**
  - A new technology/pattern is used in 3+ files
  - Common bugs could be prevented by a rule
  - Code reviews repeatedly mention the same feedback
  - New security or performance patterns emerge

- **Modify Existing Rules When:**
  - Better examples exist in the codebase
  - Additional edge cases are discovered
  - Related rules have been updated
  - Implementation details have changed

- **Example Pattern Recognition:**

```apex
// If you see repeated patterns like:
public static List<Account> getActiveAccounts() {
    return [
        SELECT Id, Name, Industry, Phone
        FROM Account
        WHERE IsActive__c = true
        AND LastModifiedDate = LAST_N_DAYS:30
        LIMIT 200
    ];
}
// Consider adding to [apex-soql-patterns.mdc](mdc:.cursor/rules/apex-soql-patterns.mdc):
// - Standard SELECT field patterns
// - Common WHERE conditions
// - Performance optimization with LIMIT
// - Date literal usage patterns
```

```javascript
// If you see repeated LWC patterns like:
import { LightningElement, api, track } from 'lwc';
import getRecords from '@salesforce/apex/DataController.getRecords';

export default class DataDisplay extends LightningElement {
    @api recordId;
    @track records = [];
    @track error;

    async connectedCallback() {
        try {
            this.records = await getRecords({ id: this.recordId });
        } catch (error) {
            this.error = error;
            this.showToast('Error', error.body.message, 'error');
        }
    }
}
// Consider adding to [lwc-data-patterns.mdc](mdc:.cursor/rules/lwc-data-patterns.mdc):
// - Standard import patterns
// - Error handling with toast notifications
// - Reactive property usage
// - Apex method calling patterns
```

- **Rule Quality Checks:**
- Rules should be actionable and specific
- Examples should come from actual code
- References should be up to date
- Patterns should be consistently enforced

## Continuous Improvement:

- Monitor code review comments
- Track common development questions
- Update rules after major refactors
- Add links to relevant documentation
- Cross-reference related rules

## Rule Deprecation

- Mark outdated patterns as deprecated
- Remove rules that no longer apply
- Update references to deprecated rules
- Document migration paths for old patterns

## Documentation Updates:

- Keep examples synchronized with code
- Update references to external docs
- Maintain links between related rules
- Document breaking changes

Follow [cursor-rules.mdc](mdc:.cursor/rules/cursor-rules.mdc) for proper rule formatting and structure.